global
    log /dev/log local0
    log /dev/log local1 notice
    daemon
    maxconn 4096
    tune.ssl.default-dh-param 2048
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11

defaults
    log global
    mode http
    option httplog
    option dontlognull
    option forwardfor
    option http-server-close
    timeout connect 5000
    timeout client 50000
    timeout server 50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

frontend http-in
    bind *:80
    mode http
    redirect scheme https code 301 if !{ ssl_fc }

frontend https-in
    bind *:443 ssl crt /etc/ssl/private/sunny-payments.pem
    mode http
    
    # HSTS (uncomment if you have a valid SSL certificate)
    # http-response set-header Strict-Transport-Security max-age=63072000
    
    # ACLs for different endpoints
    acl is_api path_beg /api
    acl is_payment path_beg /api/v1/payments
    acl is_static path_beg /static /assets /images
    acl is_websocket hdr(Upgrade) -i WebSocket
    
    # Use appropriate backends based on ACLs
    use_backend static-servers if is_static
    use_backend payment-servers if is_payment
    use_backend ws-servers if is_websocket
    use_backend api-servers if is_api
    default_backend web-servers

# Main application servers
backend web-servers
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    cookie SERVERID insert indirect nocache
    server web1 web1:3000 check cookie web1
    server web2 web2:3000 check cookie web2
    server web3 web3:3000 check cookie web3

# API servers with higher timeout for long-running requests
backend api-servers
    balance roundrobin
    option httpchk GET /api/health
    http-check expect status 200
    timeout server 120s
    server api1 api1:3000 check
    server api2 api2:3000 check
    server api3 api3:3000 check

# Payment processing servers with SSL backend
backend payment-servers
    balance roundrobin
    option httpchk GET /api/v1/payments/health
    http-check expect status 200
    timeout server 60s
    server payment1 payment1:3000 check ssl verify none
    server payment2 payment2:3000 check ssl verify none

# Static content servers (CDN fallback)
backend static-servers
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    compression algo gzip
    compression type text/html text/plain text/css application/javascript
    server static1 static1:3000 check
    server static2 static2:3000 check

# WebSocket servers
backend ws-servers
    balance source
    option httpchk GET /health
    http-check expect status 200
    timeout server 1h
    timeout tunnel 1h
    server ws1 ws1:3000 check
    server ws2 ws2:3000 check

listen stats
    bind *:8404
    stats enable
    stats uri /monitor
    stats refresh 5s
    stats realm Haproxy\ Statistics
    stats auth admin:${STATS_PASSWORD}
