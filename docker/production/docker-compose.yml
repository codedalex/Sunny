version: '3.8'

services:
  sunny-app:
    build:
      context: ../..
      dockerfile: docker/production/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    # Use .env.local-production for local preview, .env for real prod
    env_file:
      - ../../${ENV_FILE:-.env}
    depends_on:
      - mongo
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sunny-network
    volumes:
      - logs:/app/logs

  mongo:
    image: mongo:6.0
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD}
      MONGO_INITDB_DATABASE: ${DB_NAME}
    volumes:
      - mongo-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - sunny-network
    command: mongod --auth --bind_ip_all

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - sunny-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - logs:/var/log/nginx
    depends_on:
      - sunny-app
    restart: unless-stopped
    networks:
      - sunny-network

volumes:
  mongo-data:
  redis-data:
  logs:

networks:
  sunny-network:
    driver: bridge

