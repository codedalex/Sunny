# Sunny Payment Gateway - Docker Compose Configuration
# Complete microservices infrastructure setup

version: '3.8'

networks:
  sunny-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
  redis-data:
  clickhouse-data:
  prometheus-data:
  grafana-data:

services:
  # ======================
  # DATABASES
  # ======================
  
  postgres:
    image: postgres:15-alpine
    container_name: sunny-postgres
    environment:
      POSTGRES_DB: sunny_payments
      POSTGRES_USER: sunny
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sunny_secure_password}
      POSTGRES_MULTIPLE_DATABASES: "core_engine,kenya_service,auth_service,analytics"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    ports:
      - "5432:5432"
    networks:
      sunny-network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sunny -d sunny_payments"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: sunny-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-sunny_redis_password}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      sunny-network:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: sunny-clickhouse
    environment:
      CLICKHOUSE_DB: analytics
      CLICKHOUSE_USER: sunny
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-sunny_clickhouse_password}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      sunny-network:
        ipv4_address: 172.20.0.12
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ======================
  # CORE SERVICES
  # ======================

  api-gateway:
    build:
      context: ../../api/gateway
      dockerfile: Dockerfile
    container_name: sunny-api-gateway
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8080
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-sunny_redis_password}
      JWT_SECRET: ${JWT_SECRET:-sunny_jwt_secret_key_development}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-sunny_encryption_key_32_chars_dev}
      CORE_ENGINE_URL: http://core-engine:8081
      KENYA_SERVICE_URL: http://kenya-service:8082
      AUTH_SERVICE_URL: http://auth-service:8083
      ANALYTICS_SERVICE_URL: http://analytics-service:8084
      NOTIFICATION_SERVICE_URL: http://notification-service:8085
      FRAUD_DETECTION_URL: http://fraud-detection:8086
      AI_SERVICE_URL: http://ai-service:8087
      COMPLIANCE_SERVICE_URL: http://compliance-service:8088
    ports:
      - "8080:8080"
    depends_on:
      - redis
      - postgres
    networks:
      sunny-network:
        ipv4_address: 172.20.0.20
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  core-engine:
    build:
      context: ../../api/core-engine
      dockerfile: Dockerfile
    container_name: sunny-core-engine
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8081
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: core_engine
      POSTGRES_USER: sunny
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sunny_secure_password}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-sunny_redis_password}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-sunny_encryption_key_32_chars_dev}
    ports:
      - "8081:8081"
    depends_on:
      - postgres
      - redis
    networks:
      sunny-network:
        ipv4_address: 172.20.0.21
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  kenya-service:
    build:
      context: ../../api/kenya-service
      dockerfile: Dockerfile
    container_name: sunny-kenya-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8082
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: kenya_service
      POSTGRES_USER: sunny
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sunny_secure_password}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-sunny_redis_password}
      # KRA Configuration
      KRA_ETIMS_BASE_URL: ${KRA_ETIMS_BASE_URL:-https://etims-api-sbx.kra.go.ke}
      KRA_ETIMS_API_KEY: ${KRA_ETIMS_API_KEY}
      KRA_ETIMS_API_SECRET: ${KRA_ETIMS_API_SECRET}
      KRA_ITAX_BASE_URL: ${KRA_ITAX_BASE_URL:-https://itax.kra.go.ke}
      KRA_ITAX_USERNAME: ${KRA_ITAX_USERNAME}
      KRA_ITAX_PASSWORD: ${KRA_ITAX_PASSWORD}
      # M-Pesa Configuration
      MPESA_ENVIRONMENT: ${MPESA_ENVIRONMENT:-sandbox}
      MPESA_CONSUMER_KEY: ${MPESA_CONSUMER_KEY}
      MPESA_CONSUMER_SECRET: ${MPESA_CONSUMER_SECRET}
      MPESA_PASSKEY: ${MPESA_PASSKEY}
      MPESA_SHORT_CODE: ${MPESA_SHORT_CODE:-174379}
    ports:
      - "8082:8082"
    depends_on:
      - postgres
      - redis
    networks:
      sunny-network:
        ipv4_address: 172.20.0.22
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  auth-service:
    build:
      context: ../../api/auth-service
      dockerfile: Dockerfile
    container_name: sunny-auth-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8083
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: auth_service
      POSTGRES_USER: sunny
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sunny_secure_password}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-sunny_redis_password}
      JWT_SECRET: ${JWT_SECRET:-sunny_jwt_secret_key_development}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-sunny_refresh_secret_key_dev}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-sunny_encryption_key_32_chars_dev}
    ports:
      - "8083:8083"
    depends_on:
      - postgres
      - redis
    networks:
      sunny-network:
        ipv4_address: 172.20.0.23
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  analytics-service:
    build:
      context: ../../api/analytics-service
      dockerfile: Dockerfile
    container_name: sunny-analytics-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8084
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: analytics
      POSTGRES_USER: sunny
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sunny_secure_password}
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DB: analytics
      CLICKHOUSE_USER: sunny
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-sunny_clickhouse_password}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-sunny_redis_password}
    ports:
      - "8084:8084"
    depends_on:
      - postgres
      - clickhouse
      - redis
    networks:
      sunny-network:
        ipv4_address: 172.20.0.24
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  notification-service:
    build:
      context: ../../api/notification-service
      dockerfile: Dockerfile
    container_name: sunny-notification-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8085
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: notifications
      POSTGRES_USER: sunny
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sunny_secure_password}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-sunny_redis_password}
      # Email Configuration
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      # SMS Configuration
      SMS_PROVIDER: ${SMS_PROVIDER:-twilio}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
    ports:
      - "8085:8085"
    depends_on:
      - postgres
      - redis
    networks:
      sunny-network:
        ipv4_address: 172.20.0.25
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  fraud-detection:
    build:
      context: ../../api/fraud-detection
      dockerfile: Dockerfile
    container_name: sunny-fraud-detection
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8086
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: fraud_detection
      POSTGRES_USER: sunny
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sunny_secure_password}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-sunny_redis_password}
      # ML Model Configuration
      MODEL_PATH: /app/models
      ENABLE_ML_MODELS: ${ENABLE_ML_MODELS:-true}
    ports:
      - "8086:8086"
    depends_on:
      - postgres
      - redis
    networks:
      sunny-network:
        ipv4_address: 172.20.0.26
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  ai-service:
    build:
      context: ../../api/ai-service
      dockerfile: Dockerfile
    container_name: sunny-ai-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8087
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ai_service
      POSTGRES_USER: sunny
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sunny_secure_password}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-sunny_redis_password}
      # DeepSeek Configuration
      DEEPSEEK_MODEL_PATH: /app/models/deepseek
      ENABLE_GPU: ${ENABLE_GPU:-false}
      MODEL_CACHE_SIZE: ${MODEL_CACHE_SIZE:-2GB}
    ports:
      - "8087:8087"
    depends_on:
      - postgres
      - redis
    networks:
      sunny-network:
        ipv4_address: 172.20.0.27
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  compliance-service:
    build:
      context: ../../api/compliance-service
      dockerfile: Dockerfile
    container_name: sunny-compliance-service
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8088
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: compliance
      POSTGRES_USER: sunny
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sunny_secure_password}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-sunny_redis_password}
      # Compliance Configuration
      PCI_DSS_LEVEL: ${PCI_DSS_LEVEL:-1}
      GDPR_ENABLED: ${GDPR_ENABLED:-true}
      AUDIT_RETENTION_DAYS: ${AUDIT_RETENTION_DAYS:-2555} # 7 years
    ports:
      - "8088:8088"
    depends_on:
      - postgres
      - redis
    networks:
      sunny-network:
        ipv4_address: 172.20.0.28
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ======================
  # MONITORING & OBSERVABILITY
  # ======================

  prometheus:
    image: prom/prometheus:latest
    container_name: sunny-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      sunny-network:
        ipv4_address: 172.20.0.30
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: sunny-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-sunny_grafana_password}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      sunny-network:
        ipv4_address: 172.20.0.31
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: sunny-jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
    ports:
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    networks:
      sunny-network:
        ipv4_address: 172.20.0.32
    restart: unless-stopped

  # ======================
  # LOAD BALANCER
  # ======================

  nginx:
    image: nginx:alpine
    container_name: sunny-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api-gateway
    networks:
      sunny-network:
        ipv4_address: 172.20.0.40
    restart: unless-stopped

  # ======================
  # DEVELOPMENT TOOLS
  # ======================

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: sunny-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@sunnypayments.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-sunny_pgadmin_password}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      sunny-network:
        ipv4_address: 172.20.0.50
    profiles:
      - development
    restart: unless-stopped

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: sunny-redis-commander
    environment:
      REDIS_HOSTS: "local:redis:6379:0:${REDIS_PASSWORD:-sunny_redis_password}"
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      sunny-network:
        ipv4_address: 172.20.0.51
    profiles:
      - development
    restart: unless-stopped
