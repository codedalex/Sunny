input {
  file {
    path => "/var/log/sunny/*.log"
    type => "sunny-app"
    start_position => "beginning"
  }
  beats {
    port => 5044
    ssl => true
    ssl_certificate => "/etc/logstash/ssl/logstash.crt"
    ssl_key => "/etc/logstash/ssl/logstash.key"
  }
}

filter {
  if [type] == "sunny-app" {
    json {
      source => "message"
    }
    if "_jsonparsefailure" in [tags] {
      drop { }
    }

    # Add environment tag
    mutate {
      add_field => { "environment" => "${ENV:production}" }
    }

    # Parse timestamp
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }

    # Categorize log levels
    if [level] in ["ERROR", "FATAL"] {
      mutate { add_tag => ["error"] }
    } else if [level] == "WARN" {
      mutate { add_tag => ["warning"] }
    }

    # Redact sensitive information
    mutate {
      gsub => [
        "message", "cardNumber=\\d{16}", "cardNumber=[REDACTED]",
        "message", "cvv=\\d{3,4}", "cvv=[REDACTED]",
        "message", "password=\\S+", "password=[REDACTED]"
      ]
    }
  }
}

output {
  if [type] == "sunny-app" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      ssl => true
      ssl_certificate_verification => true
      cacert => "/etc/logstash/ssl/ca.crt"
      user => "${ES_USER}"
      password => "${ES_PASSWORD}"
      index => "sunny-logs-%{+YYYY.MM.dd}"
    }
  }
  
  # Send critical errors to a separate index
  if "error" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      ssl => true
      ssl_certificate_verification => true
      cacert => "/etc/logstash/ssl/ca.crt"
      user => "${ES_USER}"
      password => "${ES_PASSWORD}"
      index => "sunny-errors-%{+YYYY.MM.dd}"
    }
  }
}
